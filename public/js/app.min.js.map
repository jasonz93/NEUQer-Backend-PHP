{"version":3,"sources":["annotated.js"],"names":[],"mappingsfile":"app.min.js","sourcesContent":["/**\n * Created by nicholas on 16-3-28.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('wx3rd', [\n            'wx3rd.core',\n            'wx3rd.router'\n        ]);\n}());\n/**\n * Created by nicholas on 16-3-28.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('wx3rd.core', [\n            'ui.router',\n            'ngResource'\n        ])\n}());\n/**\n * Created by nicholas on 16-3-28.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('wx3rd.dashboard', [\n            'wx3rd.core'\n        ]);\n}());\n/**\n * Created by nicholas on 16-3-28.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('wx3rd.router', [\n            'ui.router'\n        ]);\n}());\n/**\n * Created by nicholas on 16-3-28.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('wx3rd.dashboard')\n        .controller('DashboardController', DashboardController);\n\n    DashboardController.$inject = ['$http'];\n\n    function DashboardController($http) {\n        var vm = this;\n\n    }\n}());\n/**\n * Created by nicholas on 16-3-28.\n */\n(function() {\n\n    'use strict';\n\n    angular\n        .module('wx3rd.dashboard')\n        .run(appRun);\n\n    appRun.$inject = ['routerHelper'];\n    /* @ngInject */\n    function appRun(routerHelper) {\n        routerHelper.configureStates(getStates());\n    }\n\n    function getStates() {\n        return [\n            {\n                state: 'dashboard',\n                config: {\n                    url: '/dashboard',\n                    templateUrl: '/views/wx3rd.manage.dashboard.index',\n                    controller: 'DashboardController',\n                    controllerAs: 'vm',\n                    title: 'Dashboard'\n                }\n            }\n        ];\n    }\n})();\n/**\n * Created by nicholas on 16-3-28.\n */\n/* Help configure the state-base ui.router */\n(function() {\n\n    'use strict';\n\n    angular\n        .module('wx3rd.router')\n        .provider('routerHelper', routerHelperProvider);\n\n    routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\n    /* @ngInject */\n    function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\n        /* jshint validthis:true */\n        var config = {\n            docTitle: 'Admin',\n            resolveAlways: {}\n        };\n\n        $locationProvider.html5Mode(true);\n\n        this.configure = function(cfg) {\n            angular.extend(config, cfg);\n        };\n\n        this.$get = RouterHelper;\n        RouterHelper.$inject = ['$location', '$rootScope', '$state'];\n        /* @ngInject */\n        function RouterHelper($location, $rootScope, $state, logger) {\n            var handlingStateChangeError = false;\n            var hasOtherwise = false;\n            var stateCounts = {\n                errors: 0,\n                changes: 0\n            };\n\n            var service = {\n                configureStates: configureStates,\n                getStates: getStates,\n                stateCounts: stateCounts\n            };\n\n            init();\n\n            return service;\n\n            function configureStates(states, otherwisePath) {\n                states.forEach(function(state) {\n                    state.config.resolve =\n                        angular.extend(state.config.resolve || {}, config.resolveAlways);\n                    $stateProvider.state(state.state, state.config);\n                });\n                if (otherwisePath && !hasOtherwise) {\n                    hasOtherwise = true;\n                    $urlRouterProvider.otherwise(otherwisePath);\n                }\n            }\n\n            function handleRoutingErrors() {\n                // Route cancellation:\n                // On routing error, go to the dashboard.\n                // Provide an exit clause if it tries to do it twice.\n                $rootScope.$on('$stateChangeError',\n                    function(event, toState, toParams, fromState, fromParams, error) {\n                        if (handlingStateChangeError) {\n                            return;\n                        }\n                        stateCounts.errors++;\n                        handlingStateChangeError = true;\n                        var destination = (toState &&\n                            (toState.title || toState.name || toState.loadedTemplateUrl)) ||\n                            'unknown target';\n                        var msg = 'Error routing to ' + destination + '. ' +\n                            (error.data || '') + '. <br/>' + (error.statusText || '') +\n                            ': ' + (error.status || '');\n                        logger.warning(msg, [toState]);\n                        $location.path('/');\n                    }\n                );\n            }\n\n            function init() {\n                handleRoutingErrors();\n                updateDocTitle();\n            }\n\n            function getStates() { return $state.get(); }\n\n            function updateDocTitle() {\n                $rootScope.$on('$stateChangeSuccess',\n                    function(event, toState, toParams, fromState, fromParams) {\n                        stateCounts.changes++;\n                        handlingStateChangeError = false;\n                        var title = (toState.title || '') + ' Â· ' + config.docTitle;\n                        $rootScope.mainUrl = $state.current.url.split('/')[2];\n                        $rootScope.title = title; // data bind to <title>\n                    }\n                );\n            }\n        }\n    }\n\n})();"],"sourceRoot":"/source/"}